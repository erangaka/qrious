## Play1 - Provision AWS infrastructure for webserver
- name: Automated deploy EC2 webserver
  hosts: localhost
  connection: local
  gather_facts: False

  vars:
    instance_type: t2.micro
    host_image: ami-052efd3df9dad4825
    host_count: 1
    tag_value: qrious-test

  tasks:
  - name: Install prerequisites libs and modules
    become: yes
    pip:
      name:
        - boto3
        - boto
      state: present
    register: check_install

  - debug: msg="{{ check_install.stdout_lines }}"

  - name: Create new VPC for webserver
    ec2_vpc_net:
      name: qrious-vpc1
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      cidr_block: 10.10.0.0/16
      region: "{{ aws_region }}"
      tenancy: default
      state: present
      tags:
        Group: "{{ tag_value }}"
    register: vpc_data

  - set_fact:
      new_vpc_id: "{{ vpc_data.vpc.id }}"

  - name: Create new subnet for qrious VPC
    ec2_vpc_subnet:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ new_vpc_id }}"
      region: "{{ aws_region }}"
      state: present
      cidr: 10.10.1.0/24
      map_public: yes
      tags:
        Name: qrious-subnet1-pub
        Group: "{{ tag_value }}"
    register: subnet1_data

  - name: Create new internet gateway for qrious VPC
    ec2_vpc_igw:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ new_vpc_id }}"
      region: "{{ aws_region }}"
      state: "present"
      tags:
        Name: qrious-igw1
        Group: "{{ tag_value }}"
    register: igw1_data

  - name: Create new route table for public subnet internet gateway
    ec2_vpc_route_table:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ new_vpc_id }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ subnet1_data.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw1_data.gateway_id }}"
      tags:
        Name: qrious-igw1-pub-route
        Group: "{{ tag_value }}"
    register: pub_igw_route_data

  - name: Create new security group for qrious webserver
    ec2_group:
      name: qrious-webserver-sg1
      description: Webserver Security Group Config
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_id: "{{ new_vpc_id }}"
      region: "{{ aws_region }}"
      rules:
        - proto: tcp
          ports:
            - 80
            - 443
            - 8080
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          ports: 22
          cidr_ip: 0.0.0.0/0
      tags:
        Group: "{{ tag_value }}"
    register: webser_sg1_data

  - name: Create new EC2 key-pair for login
    ec2_key:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      name: qrious-webserver-keypair
      region: "{{ aws_region }}"
    register: webser_keypair_data

  - name: Create a directory for store EC2 Private Key if it does not exist
    file:
      path: ../keys
      state: directory

  - name: Copy EC2 Private Key locally to SSH access
    copy:
      content: "{{ webser_keypair_data.key.private_key }}"
      dest: ../keys/qrious_webser1_key.pem
      mode: '400'
    when: webser_keypair_data.changed == true

  - name: Create EC2 instance for webserver
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      image: "{{ host_image }}"
      instance_type: "{{ instance_type }}"
      region: "{{ aws_region }}"
      group_id: "{{ webser_sg1_data.group_id }}"
      vpc_subnet_id: "{{ subnet1_data.subnet.id }}"
      key_name: "{{ webser_keypair_data.key.name }}"
      instance_tags:
        Name: qrious-webserver1
        Group: "{{ tag_value }}"
      count: "{{ host_count }}"
      wait: yes
    register: qrious_webserver1_data

  - set_fact:
      new_ec2_ip: "{{ qrious_webserver1_data.instances[0].public_ip }}"

  - name: Add new instance to host group
    add_host:
      hostname: "{{ new_ec2_ip }}"
      groupname: ec2webservers
      ansible_ssh_user: ubuntu
      ansible_ssh_private_key_file: keys/qrious_webser1_key.pem
      ansible_ssh_extra_args: '-o StrictHostKeyChecking=no'

  - name: Check SSH port open for new EC2 instnace
    wait_for:
      host: "{{ new_ec2_ip }}"
      port: 22
      delay: 10
      timeout: 120
    register: check_ssh_result

  - debug: msg="New webserver created. IP - {{ new_ec2_ip }}"

  - name: Pause for 5 minutes to build up EC2 instace
    pause:
      seconds: 300

## Play2 - Actions to deploy webserver on new EC2 node
- name: Install docker on new EC2 instance
  hosts: ec2webservers
  become: yes
  gather_facts: False

  roles:
    - roles/install_docker

  tasks:
  - name: Copy custom container Dockerfile to EC2
    copy:
      src: ../Dockerfile
      dest: /tmp/Dockerfile
      mode: '644'
      remote_src: no

  - name: Build customer webserver container image
    docker_image:
      name: qrious_webserver_image
      build:
        path: /tmp
      source: build
      state: present

  - name: Deploy customer webserver container
    docker_container:
      name: qrious_webserver
      image: qrious_webserver_image
      state: started
      ports:
        - 80:80
        - 8080:8080
        - 443:443
    register: webserver_docker_data

  - name: Verify webserver port is open for outside
    local_action:
      module: wait_for
      host: "{{ item }}"
      port: 80
      delay: 60
      timeout: 120
    with_items: "{{ groups['ec2webservers'] }}"
    register: check_webport_result

  - name: Copy container health check script to EC2
    copy:
      src: ../scripts/containerlogs.py
      dest: /tmp/containerlogs.py
      mode: '755'
      remote_src: no
